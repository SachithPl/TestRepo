<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1474280659000</longProp>
        <longProp name="ThreadGroup.end_time">1474280659000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/sps/Desktop/performance_testing/data.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">userName,Password,portId,taskType</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load the Login Page" enabled="true">
          <stringProp name="WebDriverSampler.script">var portid = WDS.args[0]
WDS.browser.get(&apos;http://localhost/as/01&apos;)</stringProp>
          <stringProp name="WebDriverSampler.parameters">${portId}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Enter Username &amp; Password" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
var username = WDS.args[0]
var password = WDS.args[1]

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui);
var wait = new pkg.WebDriverWait(WDS.browser, 50);
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(&apos;#flbUserName_InputTemplateItem_txbUserName&apos;)));
var usernameField = WDS.browser.findElement(pkg.By.cssSelector(&apos;#flbUserName_InputTemplateItem_txbUserName&apos;));
usernameField.clear();
usernameField.sendKeys(username);
var passwordField = WDS.browser.findElement(pkg.By.cssSelector(&apos;#flbPassword_InputTemplateItem_txbPassword&apos;));
passwordField.clear()
passwordField.sendKeys(password);

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters">${userName} ${Password}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui);
var wait = new pkg.WebDriverWait(WDS.browser, 30);
var loginButton = WDS.browser.findElement(pkg.By.cssSelector(&apos;#btnLogin&apos;));
loginButton.click();
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.cssSelector(&apos;#as-task-menu .row &gt; div:nth-child(2)&apos;)));
//java.lang.Thread.sleep(10000)
WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Start Picking" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
var tasktype = WDS.args[0];
var userName = WDS.args[1];
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui);
var wait = new pkg.WebDriverWait(WDS.browser, 100);
wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.cssSelector(&apos;#as-task-menu .row &gt; div:nth-child(2) &gt; a:nth-child(1)&apos;)));
ClickTaskType(tasktype);
for (var i = 0; i &lt; 200; i++){
	var isSuspendedTaskSelectionPageLoadingDisplayed = IsElementDisplayed(&apos;#ctl00_LoadingPanel1&apos;);	
	var isSuspendedTaskSelectionPageDisplayed = IsElementDisplayed(&apos;#ctl00_MonitorContentPlaceholder_suspendedTasksSelectBinsView_btnContinue&apos;);
	var isAutostorePickingPageDisplayed = IsElementDisplayed(&apos;#ctl00_MonitorContentPlaceholder_PickView_btnConfirm&apos;);
	if(!isSuspendedTaskSelectionPageLoadingDisplayed &amp;&amp; isSuspendedTaskSelectionPageDisplayed){
		SelectSuspendedTaskGroups(userName);
	}

	if(isSuspendedTaskSelectionPageLoadingDisplayed || !isAutostorePickingPageDisplayed){
		java.lang.Thread.sleep(500);
			continue;
	}
	
	if(isAutostorePickingPageDisplayed){
		wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.cssSelector(&apos;#ctl00_MonitorContentPlaceholder_PickView_btnConfirm&apos;)));
		break;	
	}
}
WDS.sampleResult.sampleEnd();

function ClickTaskType(taskType){
	var pickTaskTypePanel = WDS.browser.findElement(pkg.By.cssSelector(&apos;#as-task-menu .row &gt; div:nth-child(2)&apos;));
	var taskTypes = pickTaskTypePanel.findElements(pkg.By.cssSelector(&apos;a h3&apos;));
	for (var i = 0; i &lt; taskTypes.length; i++) {
  		if (taskTypes[i].getText() == taskType){
    		taskTypes[i].click();
    		break;
  		} 
	}
 }

 function IsElementDisplayed(elementIdentifier){
	try{
		return WDS.browser.findElement(pkg.By.cssSelector(elementIdentifier)).isDisplayed();
		}
	catch(err){
		return false;
		}
 }

 function SelectSuspendedTaskGroups(loggedInUserName){
 	var selectionTable = WDS.browser.findElement(pkg.By.cssSelector(&apos;.rgMasterTable tbody&apos;));
 	var selectSuspendedTaskGroup = false;
	var tableRows = selectionTable.findElements(pkg.By.cssSelector(&apos;tr&apos;));		
	for(var i = 0; i &lt; tableRows.length; i ++){
		var tableColumns = tableRows[i].findElements(pkg.By.cssSelector(&apos;td&apos;));
		if(tableColumns[3].getText() == loggedInUserName){
			tableColumns[0].findElement(pkg.By.cssSelector(&apos;input&apos;)).click();
			selectSuspendedTaskGroup = true;
			break;
		}
	}

	if(!selectSuspendedTaskGroup){
		WDS.browser.findElement(pkg.By.cssSelector(&apos;#ctl00_MonitorContentPlaceholder_suspendedTasksSelectBinsView_btnContinue&apos;)).click();		
	}
 }</stringProp>
          <stringProp name="WebDriverSampler.parameters">${taskType} ${userName}</stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\sps\Desktop\performance_testing\record.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Confirm Pick" enabled="false">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui);
var wait = new pkg.WebDriverWait(WDS.browser, 100);
var confirmButton = WDS.browser.findElement(pkg.By.cssSelector(&apos;#ctl00_MonitorContentPlaceholder_PickView_btnConfirm&apos;));
confirmButton.click();

 for (var i = 0; i &lt; 20; i++)
 {
 	java.lang.Thread.sleep(1000);
	var isConfirmButtonClickable = pkg.ExpectedConditions.elementToBeClickable(pkg.By.cssSelector(&apos;#ctl00_MonitorContentPlaceholder_PickView_btnConfirm&apos;));
	var isConfirmQuantityPopupDisplayed = false;
	try{
		isConfirmQuantityPopupDisplayed = WDS.browser.findElement(pkg.By.cssSelector(&apos;.rwTable&apos;)).isDisplayed();
		}
	catch(exception)
	{
		isConfirmQuantityPopupDisplayed = false;
		}
	//pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.cssSelector(&apos;.rwTable&apos;));
	
	if (isConfirmQuantityPopupDisplayed)
		{
			var iframe = WDS.browser.findElement(pkg.By.cssSelector(&apos;iframe&apos;));
			WDS.browser.switchTo().frame(iframe);
			var yesButton = WDS.browser.findElement(pkg.By.cssSelector(&apos;#locationEmpty&apos;));
			yesButton.click();
			WDS.browser.switchTo().defaultContent();
			break;
		}

	if(isConfirmButtonClickable)
		{
			break;
		}

	//java.lang.Thread.sleep(500);
 }

wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.cssSelector(&apos;#ctl00_MonitorContentPlaceholder_PickView_btnConfirm&apos;)));

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
WDS.sampleResult.sampleStart()
var elementA = WDS.browser.findElement(pkg.By.id(&apos;ctl00_MonitorContentPlaceholder_TaskMenuView_Button1&apos;))
elementA.click()
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\apache-jmeter-3.0\bin\Report\Report2_15_9_27.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          <stringProp name="CookieManager.policy">default</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Users\sps\Desktop\performance_testing\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://localhost:8086/write?db=element_01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">application name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Test name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
